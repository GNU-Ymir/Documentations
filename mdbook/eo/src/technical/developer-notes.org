#+TITLE:     Compiler developer notes
#+AUTHOR:    Emile Cadorel
#+EMAIL:     (concat "ecadorel" at-sign "gmail.com")
#+DATE:      2019-11-18
#+LANGUAGE:  en
#+OPTIONS:   H:4 toc:2

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/emile/.local/src/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/home/emile/.local/src/readtheorg.css"/>

* Information

  
  This document notes some materials on how this frontend of GCC works
  

* Errors 
 
    All the error system handle the errors that occurs during the compilation, errors can be either : 
    - *External*, due to user mistakes
    - *Internal*, due to compiler misfunction 

    For code reuse and clarity, all the throwable external errors or gettable with the internal Ymir, StringEnum named ExternalError
    
    
    #+BEGIN_SRC c++
    lexing::Word loc = // ...
    // ...
    Ymir::Error::occur (loc, ExternalError::get (UNDEF_VAR), "foo");
    #+END_SRC

    All the errors are listed in the file [[file:./errors/ListError.hh][ymir/errors/ListError.hh]]

    
    To handle error throwing, the Exception system allow us to catch errors.

    #+BEGIN_SRC c++
    TRY (
    // ... sensible code
    ) CATCH (ErrorCode::External) {
      GET_ERRORS_AND_CLEAR (msgs); // create vector msgs with all the errors stored in it
      // If we do not get the errors, they will still be stored and sent during a future throw
      // I recommend to always GET the msgs, to avoid weird stuff to happen
    } FINALLY; // Mandatory to free some exception stuff ^^
    #+END_SRC


    Their is multiple way to throw errors, in the file [[file:./errors/Error.hh][ymir/errors/Error.hh]] 

* generic 

   Some #define, to define type that don't exist in gcc, like *ubyte_type_node*
   It is used in ymir1.c, to define the type size 

* global 

   The namespace global define a singleton State, to store data that are true at any moment during the compilation.
   Those informations are updated by the option path to the command line : 
   - Versions (user define version, --fversion=)
   - includeDirs (-I, --include\_dirs=)
   - includeInPrefix ("include/ymir/")
   - corePath (define by the prefix, \${prefixPath}\${includeInPrefix}/core/)
   - prefixPath (--prefix)
   - isDebug (-g, --ggdb)
   - isVerbose (-v, --verbose)

* gycspec

   Define the specification of the plugin GYC for GCC.
   This add the
   linkage to the default libraries : libgyruntime and libgymidgard,
   as well as the libgc including the garbage collector

* lexing 

** Lexer 
    [[./lexing/Lexer.hh]]

   The lexer class cut the a file into tokens, it is used in the syntax Visitor, (*and must be used only there*)
   
   #+BEGIN_SRC c++
   auto lex = lexing::Lexer ("file.yr", 
                             {Token::SPACE, Token::RETURN}, // The token that are skipped by default
			     {
			       {Token::LCOMM1, {Token::RCOMM1, ""}}, 
			       {Token::LCOMM2, {Token::RETURN, ""}} // the comments token (begin, {end, ignore})
			     }
	       );
			       
   auto tok = lex.next ({Token::LPAR, Token::PIPE}); // get the next token, it must be either '(' or '|'
   // It will throw an error otherwise, (External)
   #+END_SRC
   
   The lexer is able to return a token, with its associated user documentation, but it is not used for the moment
   
   For example, the following source code : 

   #+BEGIN_SRC python
   /**
   * Returns: the sum of two i32
   * Params: 
   * - a, a i32
   * - b, a i32
   */
   def foo () {
       //...
   }
   #+END_SRC

   Will give the following result when calling =auto tok = lex.nextWithDocs (docs, {Keys::DEF})=
   - docs : Returns: the sum ...
   - tok : {def, <7, 1>}
   

** Token 

    List all the token of Ymir
    
** Word

    A word is a string with associated location in a source file

* parsing

   This is the main of the compiler plugin, the class Parser  will parse a given file
   A parsing is divided in three phases : 
   - syntaxicTime
   - semanticTime
   - lintTime (generation of intermediate language)


 
* semantic 

  This part is the most complexe of the all compiler. It is in charge
  of the declaration, and validation of the declared symbols.


   
