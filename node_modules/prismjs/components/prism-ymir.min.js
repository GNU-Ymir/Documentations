Prism.languages.ymir = {
    'comment': [	
	{
	    pattern: /(^|[^\\])\/\*[\w\W]*?\*\//,
	    lookbehind: true
	},
	{
	    pattern: /(^|[^\\:])\/\/.*/,
	    lookbehind: true
	}
    ],
    'string': [
	    /b?r(#*)"(?:\\?.)*?"\1/,
	    /b?("|')(?:\\?.)*?\1/
    ],
    
    'keyword': /\b(?:break|mut|const|else|enum|extern|false|final|fn|for|if|in|let|match|mod|mut|over|private|public|ref|return|sizeof|static|self|struct|super|true|def|dg|typeof|use|while|import|assert|macro|move|copy|dcopy)\b/,
    
    'attribute': {
	pattern: /#!?:\[.+?\]/,
	alias: 'attr-name'
    },

    'function': [
	    /[a-z0-9_]+(?=\s*\()/i,
	// Macros can use parens or brackets
	    /[a-z0-9_]+!(?=\s*\(|\[)/i
    ],
    
    'macro-rules': {
	pattern: /[a-z0-9_]+:/i,
	alias: 'function'
    },

    // Closure params should not be confused with bitwise OR |
    'closure-params': {
	pattern: /\|[^|]*\|(?=\s*[{-])/,
	inside: {
	    'punctuation': /[\|:,]/,
	    'operator': /[&*]/
	}
    },

    // Hex, oct, bin, dec numbers with visual separators and type suffix
    'number': /\b-?(?:0x[\dA-Fa-f](?:_?[\dA-Fa-f])*|0o[0-7](?:_?[0-7])*|0b[01](?:_?[01])*|(\d(_?\d)*)?\.?\d(_?\d)*([Ee][+-]?\d+)?)(?:_?(?:[iu](?:8|16|32|64)?|f32|f64))?\b/,
    'punctuation': /[{}[\];(),:]|\.+|->/,
    'operator': /[-+*\/%!^=]=?|@|&[&=]?|\|[|=]?|<<?=?|>>?=?/	

}
